
{{ $returnUrl := "/home" }}
{{ if (eq .RankNumber -2) }}
{{ $returnUrl = "/progress" }}
{{ end }}

<section class="flex max-h-screen h-screen overflow-hidden" x-data>
  <div class="w-[73%] h-screen max-h-screen relative">
        <a class="absolute left-5 top-5 w-6 h-6 z-10 cursor-pointer" @click="window.location = '{{$returnUrl}}'">
          <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
          </svg>
        </a>


        {{ if .PreviousVideo }}
        <!-- Button to previous video -->
        <a class="absolute right-5 top-5 w-6 h-6 z-10 cursor-pointer" 
        @click="window.location = '/watch/{{ .PreviousVideo.Username }}/{{ .PreviousVideo.Key }}/{{ sub .RankNumber 1 }}'"
        >
        <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13V1m0 0L1 5m4-4 4 4"/>
          </svg>
        </a>
        {{ end }}

        
        {{ if .NextVideo }}
        <!-- Button to next video -->
        <a class="absolute right-5 bottom-5 w-6 h-6 z-10 cursor-pointer"
        @click="window.location = '/watch/{{ .NextVideo.Username }}/{{ .NextVideo.Key }}/{{ add .RankNumber 1 }}'"
        >
          <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1v12m0 0 4-4m-4 4L1 9"/>
          </svg>
        </a>
        {{ end }}


        <div class="flex max-h-screen w-full h-full items-center justify-center justify-items-center z-0">
          {{ template "components/video" (map "API_GATEWAY_URL" .API_GATEWAY_URL "Username" .Username "Thumbnail" .Thumbnail "VideoKey" .VideoKey ) }}
        </div>
  </div>

  <!-- Side bar -->
  <div class="w-[27%] flex h-screen bg-surface-0 flex-col">
    <div class="mx-4 mt-4 flex flex-col">
      <p class="text-lg text-text-base">{{ .VideoName }}</p>
      <p class="text-sm text-text-base">By {{ .Username }}</p> 
      <p class="text-sm text-text-base" id="view"></p>
      <div 
      	x-data="likeCounter()"
      	class="flex"
      >
      		<button 
            class="inline-block flex flex-row h-9 w-20 align-middle border-2 rounded-lg items-center"
    				type="button"
    				class="cursor-pointer align-middle"
    				@click="likeCounterHandler()"
          >
      			<div>
      				<!-- Like icon -->
      				<svg 
      					xmlns="http://www.w3.org/2000/svg" 
      					class="h-6 w-6 ml-1"
      					x-show="!isLiked"
      					fill="none" 
      					viewBox="0 0 24 24" 
      					stroke="currentColor"
      				>
      					  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
      				</svg>
			
      				<!-- Unlike icon -->
      				<svg 
      					xmlns="http://www.w3.org/2000/svg" 
      					class="h-6 w-6 ml-1"
      					x-show="isLiked"
      					fill="currentColor" 
      					viewBox="0 0 20 20"
      					stroke="currentColor"
      			  >
      					  <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
      				</svg>
      			</div>
		
      			<!-- Like count -->
      			<span 
      				x-text="likeCount"
      				class="w-full text-lg text-center"
              id="likes"
      			></span>

      		</div>
      </button>
    </div>

    <!-- Comment Section -->
    <div class="flex h-full mt-4 mx-4 w-full overflow-auto rounded-t-lg bg-surface-1">
      <div class="max-w-2xl mx-auto w-full px-4 mb-3">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-lg lg:text-2xl font-bold text-gray-900 dark:text-white">Discussion</h2>
          </div>
        <form class="mb-6">
            <div class="py-2 rounded-lg rounded-t-lg px-4 mb-4 bg-surface-0">
                <label for="comment" class="sr-only">Your comment</label>
                <textarea id="comment" rows="6"
                    class="px-0 w-full h-8 text-sm text-gray-900 border-0 focus:ring-0 focus:outline-none dark:text-white dark:placeholder-gray-400 bg-surface-0"
                    placeholder="Write a comment..." required></textarea>
            </div>
            <button id="post-comment" type="submit" @click="submitNewComment(); document.getElementById('post-comment').innerHTML='Post comment'; document.getElementById('comment').value=''" hx-post="http://{{.API_GATEWAY_URL}}/api/comment" hx-request='"credentials":true' hx-vals="js:{comment: getComment(), user_id: getUserID(), video_id: getVideoID()}"
                class="inline-flex items-center py-2.5 px-4 text-xs font-medium text-center text-white bg-surface-0 rounded-lg focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900 hover:bg-surface-2">
                Post comment
            </button>
        </form>

        <!-- Separate -->
        <hr class="h-px my-4 border-1">

        <div id="comment-section" class="w-full h-auto space-y-3">
        </div>

        <div class="h-3 w-full"></div>

      </div>
    </div>
    <!-- /Comment Section -->


  </div>
</section>

<script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script><script>
  var socket = io.connect('ws://localhost:5001', { transports: ['websocket'] });

  // Join the room for the video.
  socket.emit('video', { video:'{{ .VideoKey }}' });

  // Subscribe to update event, so we can update the count of the views.
  socket.on('update', info => {
    document.getElementById("view").innerHTML = info.value;
  });

  // Poll for view.
  setInterval(() => {fetchViews(socket)}, 5000);
  function fetchViews(socket) {
    socket.emit('getNewViewCount', { video:'{{ .VideoKey }}' });
    socket.emit('getNewLikeCount', { videoKey:'{{ .VideoKey }}', videoID:'{{ .VideoID }}', userID:'{{ .UserID }}' });
  }

  // Request for the video like info.
  socket.emit('getNewLikeCount', { 
    videoKey:'{{ .VideoKey }}', 
    videoID:'{{ .VideoID }}', 
    userID:'{{ .UserID }}' 
  });

  // Request for the video comments.
  socket.emit('getVideoComments', { 
    videoKey:'{{ .VideoKey }}',  // For the room.
    videoID:'{{ .VideoID }}', 
  });

  var like = {{ .Liked }};
  var likedCount = {{ .LikedCount }};

  // This is for alpinejs.
	const likeCounter = () => {
		return {
			likeCount: likedCount, 
			isLiked: like,
			likeCounterHandler() {
				this.isLiked = !this.isLiked;

        socket.emit('videoLikeToggle', { videoKey:'{{ .VideoKey }}', videoID:'{{ .VideoID }}', userID:'{{ .UserID }}', isLike:this.isLiked });

        // TODO: Remove me later.
				this.isLiked ? this.likeCount++ : this.likeCount--;
			},
      init() {
        socket.on("like", info => {
          console.log("New like value: ", info.value);
          this.likeCount = info.value;
        });
      }
		}
	}

  const getComment = () => {
    return document.getElementById("comment").value;
  }

  const getUserID = () => {
    return '{{ .UserID }}';
  }

  const getVideoID = () => {
    return '{{ .VideoID }}';
  }

  const generateComment = (info) => {
    return '<article class="p-3 w-full text-base rounded-lg bg-surface-0"> <footer class="flex justify-between items-center mb-1"> <div class="flex items-center"> <p class="inline-flex items-center mr-3 text-sm text-gray-900 dark:text-white font-semibold">' + info.user + '</p><p class="text-sm text-gray-600 dark:text-gray-400"><time pubdate datetime="2022-02-08" title="February 8th, 2022">' + info.date + '</time></p> </div> </footer> <p class="text-gray-500 dark:text-gray-400">' + info.comment + '</p></article>'
  };

  socket.on('comment', info => {
    console.log(info.value);

    const commentSection = document.getElementById("comment-section");
    for (const comment of JSON.parse(info.value)) {
      commentSection.insertAdjacentHTML("afterbegin", generateComment(comment));
    }
  });

  const submitNewComment = () => {
    socket.emit("newComment", {
      comment: getComment(),
      date: new Date(), // The current time.
      user_id: getUserID(),
      video_id: getVideoID(),
      room: '{{ .VideoKey }}room',
    });
  }

</script>
