
{{ $returnUrl := "/home" }}
{{ if (eq .RankNumber -2) }}
{{ $returnUrl = "/progress" }}
{{ end }}

<section class="flex max-h-screen h-screen overflow-hidden" x-data>
  <div class="w-[73%] h-screen max-h-screen relative">
        <a class="absolute left-5 top-5 w-6 h-6 z-10 cursor-pointer" @click="window.location = '{{$returnUrl}}'">
          <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
          </svg>
        </a>


        {{ if .PreviousVideo }}
        <!-- Button to previous video -->
        <a class="absolute right-5 top-5 w-6 h-6 z-10 cursor-pointer" 
        @click="window.location = '/watch/{{ .PreviousVideo.Username }}/{{ .PreviousVideo.Key }}/{{ sub .RankNumber 1 }}'"
        >
        <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13V1m0 0L1 5m4-4 4 4"/>
          </svg>
        </a>
        {{ end }}

        
        {{ if .NextVideo }}
        <!-- Button to next video -->
        <a class="absolute right-5 bottom-5 w-6 h-6 z-10 cursor-pointer"
        @click="window.location = '/watch/{{ .NextVideo.Username }}/{{ .NextVideo.Key }}/{{ add .RankNumber 1 }}'"
        >
          <svg class="w-full h-full text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1v12m0 0 4-4m-4 4L1 9"/>
          </svg>
        </a>
        {{ end }}


        <div class="flex max-h-screen w-full h-full items-center justify-center justify-items-center z-0">
          {{ template "components/video" (map "API_GATEWAY_URL" .API_GATEWAY_URL "Username" .Username "Thumbnail" .Thumbnail "VideoKey" .VideoKey ) }}
        </div>
  </div>

  <!-- Side bar -->
  <div class="w-[27%] h-screen bg-surface-0">
    <div class="mx-4 my-4 flex flex-col">
      <p class="text-lg text-text-base">{{ .VideoName }}</p>
      <p class="text-sm text-text-base">By {{ .Username }}</p> 
      <p class="text-sm text-text-base" id="view"></p>
      <div 
      	x-data="likeCounter()"
      	class="flex h-screen"
      >
      		<button 
            class="inline-block flex flex-row h-9 w-20 align-middle border-2 rounded-lg items-center"
    				type="button"
    				class="cursor-pointer align-middle"
    				@click="likeCounterHandler()"
          >
      			<div>
      				<!-- Like icon -->
      				<svg 
      					xmlns="http://www.w3.org/2000/svg" 
      					class="h-6 w-6 ml-1"
      					x-show="!isLiked"
      					fill="none" 
      					viewBox="0 0 24 24" 
      					stroke="currentColor"
      				>
      					  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
      				</svg>
			
      				<!-- Unlike icon -->
      				<svg 
      					xmlns="http://www.w3.org/2000/svg" 
      					class="h-6 w-6 ml-1"
      					x-show="isLiked"
      					fill="currentColor" 
      					viewBox="0 0 20 20"
      					stroke="currentColor"
      			  >
      					  <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
      				</svg>
      			</div>
		
      			<!-- Like count -->
      			<span 
      				x-text="likeCount"
      				class="w-full text-lg text-center"
              id="likes"
      			></span>

      		</div>
      </button>
    </div>

  </div>
</section>

<script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script><script>
  var socket = io.connect('ws://localhost:5001', { transports: ['websocket'] });

  // Join the room for the video.
  socket.emit('video', { video:'{{ .VideoKey }}' });

  // Subscribe to update event, so we can update the count of the views.
  socket.on('update', info => {
    document.getElementById("view").innerHTML = info.value;
  });


  // Poll for view.
  setInterval(() => {fetchViews(socket)}, 5000);
  function fetchViews(socket) {
    socket.emit('getNewViewCount', { video:'{{ .VideoKey }}' });
    socket.emit('getNewLikeCount', { videoKey:'{{ .VideoKey }}', videoID:'{{ .VideoID }}', userID:'{{ .UserID }}' });
  }

  // NOTE: The logic for the db should be put into the websocket server.
  // TODO: Subscribe to update like event, so we can make it eventually consistent.

  // Check whether the video is liked by the user or not.
  // If entry DNE || !like --> false.
  // If exist && like      --> true.

  // Request for the video like info.
  socket.emit('getNewLikeCount', { 
    videoKey:'{{ .VideoKey }}', 
    videoID:'{{ .VideoID }}', 
    userID:'{{ .UserID }}' 
  });

  var like = {{ .Liked }};
  var likedCount = {{ .LikedCount }};

  // This is for alpinejs.
	const likeCounter = () => {
		return {
			likeCount: likedCount, 
			isLiked: like,
			likeCounterHandler() {
				this.isLiked = !this.isLiked;

        socket.emit('videoLikeToggle', { videoKey:'{{ .VideoKey }}', videoID:'{{ .VideoID }}', userID:'{{ .UserID }}', isLike:this.isLiked });

        // TODO: Remove me later.
				this.isLiked ? this.likeCount++ : this.likeCount--;
			},
      init() {
        socket.on("like", info => {
          console.log("New like value: ", info.value);
          this.likeCount = info.value;
        });
      }
		}
	}
</script>
